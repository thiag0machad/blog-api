### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  autor: User!
  autorId: Int!
  conteudo: String!
  createdAt: DateTime!
  id: Int!
  publicado: Boolean!
  titulo: String!
}

input PostCreateInput {
  Review: ReviewCreateNestedManyWithoutPostInput
  autor: UserCreateNestedOneWithoutPostsInput!
  conteudo: String!
  createdAt: DateTime
  publicado: Boolean
  titulo: String!
}

input PostCreateManyAutorInput {
  conteudo: String!
  createdAt: DateTime
  id: Int
  publicado: Boolean
  titulo: String!
}

input PostCreateManyAutorInputEnvelope {
  data: [PostCreateManyAutorInput!]
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAutorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAutorInput!]
  create: [PostCreateWithoutAutorInput!]
  createMany: PostCreateManyAutorInputEnvelope
}

input PostCreateNestedOneWithoutReviewInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutReviewInput
  create: PostCreateWithoutReviewInput
}

input PostCreateOrConnectWithoutAutorInput {
  create: PostCreateWithoutAutorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutReviewInput {
  create: PostCreateWithoutReviewInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAutorInput {
  Review: ReviewCreateNestedManyWithoutPostInput
  conteudo: String!
  createdAt: DateTime
  publicado: Boolean
  titulo: String!
}

input PostCreateWithoutReviewInput {
  autor: UserCreateNestedOneWithoutPostsInput!
  conteudo: String!
  createdAt: DateTime
  publicado: Boolean
  titulo: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  Review: ReviewListRelationFilter
  autor: UserWhereInput
  autorId: IntFilter
  conteudo: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  publicado: BoolFilter
  titulo: StringFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  buscaAutoresPublicados(email: String!): [User]
  postsAprovados: [Post]
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int): [Review!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByWithRelationInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Review {
  createdAt: DateTime
  id: Int!
  nota: Int!
  post: Post!
  postId: Int!
  reviewer: User!
  reviewerId: Int!
}

input ReviewCreateManyPostInput {
  createdAt: DateTime
  id: Int
  nota: Int!
  reviewerId: Int!
}

input ReviewCreateManyPostInputEnvelope {
  data: [ReviewCreateManyPostInput!]
  skipDuplicates: Boolean
}

input ReviewCreateManyReviewerInput {
  createdAt: DateTime
  id: Int
  nota: Int!
  postId: Int!
}

input ReviewCreateManyReviewerInputEnvelope {
  data: [ReviewCreateManyReviewerInput!]
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutPostInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutPostInput!]
  create: [ReviewCreateWithoutPostInput!]
  createMany: ReviewCreateManyPostInputEnvelope
}

input ReviewCreateNestedManyWithoutReviewerInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutReviewerInput!]
  create: [ReviewCreateWithoutReviewerInput!]
  createMany: ReviewCreateManyReviewerInputEnvelope
}

input ReviewCreateOrConnectWithoutPostInput {
  create: ReviewCreateWithoutPostInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutReviewerInput {
  create: ReviewCreateWithoutReviewerInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutPostInput {
  createdAt: DateTime
  nota: Int!
  reviewer: UserCreateNestedOneWithoutReviewInput!
}

input ReviewCreateWithoutReviewerInput {
  createdAt: DateTime
  nota: Int!
  post: PostCreateNestedOneWithoutReviewInput!
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  createdAt: DateTimeNullableFilter
  id: IntFilter
  nota: IntFilter
  post: PostWhereInput
  postId: IntFilter
  reviewer: UserWhereInput
  reviewerId: IntFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  nome: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutReviewInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewInput
  create: UserCreateWithoutReviewInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewInput {
  create: UserCreateWithoutReviewInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  Review: ReviewCreateNestedManyWithoutReviewerInput
  createdAt: DateTime
  email: String!
  nome: String!
}

input UserCreateWithoutReviewInput {
  createdAt: DateTime
  email: String!
  nome: String!
  posts: PostCreateNestedManyWithoutAutorInput
}

input UserOrderByWithRelationInput {
  Review: ReviewOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  nome: SortOrder
  posts: PostOrderByRelationAggregateInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Review: ReviewListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  nome: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  id: Int
}
